import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Random;

public class GameMap extends JPanel {
    private final int rows = 12;
    private final int cols = 16;
    private final int tileSize = 48;
    private int playerX = 5; // Player's starting position
    private int playerY = 5;
    private int npcCount = 5;
    private Point[] npcs; // NPC positions
    private String[] npcTexts = {
            "Greetings, traveler!",
            "Beware of the dangers ahead.",
            "Do you seek wisdom?",
            "A great treasure lies nearby.",
            "Your journey is just beginning."
    };

    public GameMap() {
        setPreferredSize(new Dimension(cols * tileSize, rows * tileSize));
        setBackground(Color.BLACK);

        // Generate NPCs
        generateNPCs();

        // Enable keyboard controls
        setFocusable(true);
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                handleMovement(e.getKeyCode());
                repaint();
            }
        });
    }

    private void generateNPCs() {
        npcs = new Point[npcCount];
        Random random = new Random();
        for (int i = 0; i < npcCount; i++) {
            int x = random.nextInt(cols);
            int y = random.nextInt(rows);
            npcs[i] = new Point(x, y);
        }
    }

    private void handleMovement(int keyCode) {
        switch (keyCode) {
            case KeyEvent.VK_UP -> playerY = Math.max(0, playerY - 1);
            case KeyEvent.VK_DOWN -> playerY = Math.min(rows - 1, playerY + 1);
            case KeyEvent.VK_LEFT -> playerX = Math.max(0, playerX - 1);
            case KeyEvent.VK_RIGHT -> playerX = Math.min(cols - 1, playerX + 1);
        }
        checkForNPCInteraction();
    }

    private void checkForNPCInteraction() {
        for (Point npc : npcs) {
            if (npc.x == playerX && npc.y == playerY) {
                int index = new Random().nextInt(npcTexts.length);
                JOptionPane.showMessageDialog(this, npcTexts[index], "NPC Interaction", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Draw grid
        g.setColor(Color.LIGHT_GRAY);
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                g.drawRect(col * tileSize, row * tileSize, tileSize, tileSize);
            }
        }

        // Draw player
        g.setColor(Color.RED);
        g.fillOval(playerX * tileSize, playerY * tileSize, tileSize, tileSize);

        // Draw NPCs
        g.setColor(Color.BLUE);
        for (Point npc : npcs) {
            g.fillRect(npc.x * tileSize, npc.y * tileSize, tileSize, tileSize);
        }
    }
}
